/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TasksRouteRouteImport } from './routes/tasks/route'
import { Route as StaticRouteRouteImport } from './routes/_static/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as TasksIndexRouteImport } from './routes/tasks/index'
import { Route as DashboardIndexRouteImport } from './routes/dashboard/index'
import { Route as StaticPrivacyRouteImport } from './routes/_static/privacy'
import { Route as StaticAboutRouteImport } from './routes/_static/about'
import { Route as TasksTaskIdRouteRouteImport } from './routes/tasks/$taskId/route'
import { Route as TasksTaskIdIndexRouteImport } from './routes/tasks/$taskId/index'
import { Route as TasksTaskIdResourcesRouteImport } from './routes/tasks/$taskId/resources'

const TasksRouteRoute = TasksRouteRouteImport.update({
  id: '/tasks',
  path: '/tasks',
  getParentRoute: () => rootRouteImport,
} as any)
const StaticRouteRoute = StaticRouteRouteImport.update({
  id: '/_static',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const TasksIndexRoute = TasksIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => TasksRouteRoute,
} as any)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => rootRouteImport,
} as any)
const StaticPrivacyRoute = StaticPrivacyRouteImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => StaticRouteRoute,
} as any)
const StaticAboutRoute = StaticAboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => StaticRouteRoute,
} as any)
const TasksTaskIdRouteRoute = TasksTaskIdRouteRouteImport.update({
  id: '/$taskId',
  path: '/$taskId',
  getParentRoute: () => TasksRouteRoute,
} as any)
const TasksTaskIdIndexRoute = TasksTaskIdIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => TasksTaskIdRouteRoute,
} as any)
const TasksTaskIdResourcesRoute = TasksTaskIdResourcesRouteImport.update({
  id: '/resources',
  path: '/resources',
  getParentRoute: () => TasksTaskIdRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/tasks': typeof TasksRouteRouteWithChildren
  '/tasks/$taskId': typeof TasksTaskIdRouteRouteWithChildren
  '/about': typeof StaticAboutRoute
  '/privacy': typeof StaticPrivacyRoute
  '/dashboard': typeof DashboardIndexRoute
  '/tasks/': typeof TasksIndexRoute
  '/tasks/$taskId/resources': typeof TasksTaskIdResourcesRoute
  '/tasks/$taskId/': typeof TasksTaskIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof StaticAboutRoute
  '/privacy': typeof StaticPrivacyRoute
  '/dashboard': typeof DashboardIndexRoute
  '/tasks': typeof TasksIndexRoute
  '/tasks/$taskId/resources': typeof TasksTaskIdResourcesRoute
  '/tasks/$taskId': typeof TasksTaskIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_static': typeof StaticRouteRouteWithChildren
  '/tasks': typeof TasksRouteRouteWithChildren
  '/tasks/$taskId': typeof TasksTaskIdRouteRouteWithChildren
  '/_static/about': typeof StaticAboutRoute
  '/_static/privacy': typeof StaticPrivacyRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/tasks/': typeof TasksIndexRoute
  '/tasks/$taskId/resources': typeof TasksTaskIdResourcesRoute
  '/tasks/$taskId/': typeof TasksTaskIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/tasks'
    | '/tasks/$taskId'
    | '/about'
    | '/privacy'
    | '/dashboard'
    | '/tasks/'
    | '/tasks/$taskId/resources'
    | '/tasks/$taskId/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/privacy'
    | '/dashboard'
    | '/tasks'
    | '/tasks/$taskId/resources'
    | '/tasks/$taskId'
  id:
    | '__root__'
    | '/'
    | '/_static'
    | '/tasks'
    | '/tasks/$taskId'
    | '/_static/about'
    | '/_static/privacy'
    | '/dashboard/'
    | '/tasks/'
    | '/tasks/$taskId/resources'
    | '/tasks/$taskId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  StaticRouteRoute: typeof StaticRouteRouteWithChildren
  TasksRouteRoute: typeof TasksRouteRouteWithChildren
  DashboardIndexRoute: typeof DashboardIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/tasks': {
      id: '/tasks'
      path: '/tasks'
      fullPath: '/tasks'
      preLoaderRoute: typeof TasksRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_static': {
      id: '/_static'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof StaticRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tasks/': {
      id: '/tasks/'
      path: '/'
      fullPath: '/tasks/'
      preLoaderRoute: typeof TasksIndexRouteImport
      parentRoute: typeof TasksRouteRoute
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_static/privacy': {
      id: '/_static/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof StaticPrivacyRouteImport
      parentRoute: typeof StaticRouteRoute
    }
    '/_static/about': {
      id: '/_static/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof StaticAboutRouteImport
      parentRoute: typeof StaticRouteRoute
    }
    '/tasks/$taskId': {
      id: '/tasks/$taskId'
      path: '/$taskId'
      fullPath: '/tasks/$taskId'
      preLoaderRoute: typeof TasksTaskIdRouteRouteImport
      parentRoute: typeof TasksRouteRoute
    }
    '/tasks/$taskId/': {
      id: '/tasks/$taskId/'
      path: '/'
      fullPath: '/tasks/$taskId/'
      preLoaderRoute: typeof TasksTaskIdIndexRouteImport
      parentRoute: typeof TasksTaskIdRouteRoute
    }
    '/tasks/$taskId/resources': {
      id: '/tasks/$taskId/resources'
      path: '/resources'
      fullPath: '/tasks/$taskId/resources'
      preLoaderRoute: typeof TasksTaskIdResourcesRouteImport
      parentRoute: typeof TasksTaskIdRouteRoute
    }
  }
}

interface StaticRouteRouteChildren {
  StaticAboutRoute: typeof StaticAboutRoute
  StaticPrivacyRoute: typeof StaticPrivacyRoute
}

const StaticRouteRouteChildren: StaticRouteRouteChildren = {
  StaticAboutRoute: StaticAboutRoute,
  StaticPrivacyRoute: StaticPrivacyRoute,
}

const StaticRouteRouteWithChildren = StaticRouteRoute._addFileChildren(
  StaticRouteRouteChildren,
)

interface TasksTaskIdRouteRouteChildren {
  TasksTaskIdResourcesRoute: typeof TasksTaskIdResourcesRoute
  TasksTaskIdIndexRoute: typeof TasksTaskIdIndexRoute
}

const TasksTaskIdRouteRouteChildren: TasksTaskIdRouteRouteChildren = {
  TasksTaskIdResourcesRoute: TasksTaskIdResourcesRoute,
  TasksTaskIdIndexRoute: TasksTaskIdIndexRoute,
}

const TasksTaskIdRouteRouteWithChildren =
  TasksTaskIdRouteRoute._addFileChildren(TasksTaskIdRouteRouteChildren)

interface TasksRouteRouteChildren {
  TasksTaskIdRouteRoute: typeof TasksTaskIdRouteRouteWithChildren
  TasksIndexRoute: typeof TasksIndexRoute
}

const TasksRouteRouteChildren: TasksRouteRouteChildren = {
  TasksTaskIdRouteRoute: TasksTaskIdRouteRouteWithChildren,
  TasksIndexRoute: TasksIndexRoute,
}

const TasksRouteRouteWithChildren = TasksRouteRoute._addFileChildren(
  TasksRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  StaticRouteRoute: StaticRouteRouteWithChildren,
  TasksRouteRoute: TasksRouteRouteWithChildren,
  DashboardIndexRoute: DashboardIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
